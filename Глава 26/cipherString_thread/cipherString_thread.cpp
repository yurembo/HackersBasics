// cipherString_thread.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <stdio.h>
#include <string.h>
#include <process.h>

// Эта функция будет выполняться в отдельном потоке,
// ее назначение незаметно изменять регистр символов в строке,
// содержащей имя пользователя 
void My(void* arg)
{
	int p = 1;	// Указатель на шифруемый байт;
	// обратите внимание, шифровка выполняется 
	// не с первого байта, это позволяет обойти 
	// контрольную точку, установленную на начало буфера;
	// выполнять до тех пор, пока не встретится перенос строки 
	while(((char*)arg)[p] != '\n')
	{
		// ожидать, пока очередной символ не будет инициализирован 
		while(((char *)arg)[p] < 0x20);
		// инвертировать пятый бит,
		// это приводит к изменению регистра латинских
		// символов на противоположный
		((char*)arg)[p] ^= 0x20;
		// указатель на следующий обрабатываемый байт 
		p++;
	}
}
int main(int argc, char* argv[])
{
	char name[100];	// буфер, содержащий имя пользователя
	char buff[100];	// буфер, содержащий пароль
	// забивка буфера имени пользователя нулями,
	// некоторые компиляторы это делают за нас, но не все!
	memset(&name[0], 0, 100);
	// выполнять процедуру My в отдельном потоке 
	_beginthread(&My, NULL, (void *) &name[0]);
	// запрос имени пользователя
	printf("Enter name: ");
	fgets(&name[0], 66, stdin);
	// запрос пароля
	// Важно: пока пользователь вводит пароль, второй поток 
	// получает достаточно квантов времени, чтобы изменить 
	// регистр всех символов имени пользователя.
	// Это обстоятельство не так очевидно и не вытекает из 
	// беглого анализа программы, особенно при ее исследовании 
	// под отладчиком, слабо показывающим влияние 
	// отдельных компонентов программы друг на друга.
	printf("Enter password: "); 
	fgets(&buff[0], 66, stdin);
	// сравнение имени и пароля c зталонными значениями 
	if (!(strcmp(&buff[0], "password\n")
		// Важно: поскольку введенное пользователем имя было 
		// преобразовано, фактически происходит сравнение не
		// strcmp(&name[0],”KPNC\n”) а strcmp(&name[0],”Kpnc\n”), 
		// что далеко не очевидно на первый взгляд 
		|| strcmp(&name[0], "KPNC\n")))
		// правильные имя и пароль 
		printf("USER OK\n");
	else
		// ошибка в вводе имени или пароля
		printf("Wrong user or password!\n");
	return 0;
}
